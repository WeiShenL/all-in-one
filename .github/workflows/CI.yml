name: CI Pipeline

on:
  pull_request:
    branches: [main]

permissions:
  contents: read
  pull-requests: write
  actions: read
  checks: write
  security-events: write

jobs:
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # type checking
      - name: TypeScript Type Check
        run: npx tsc --noEmit

      # format checking
      - name: Run Prettier Check
        run: npm run format:check

      # lint checking
      - name: Run ESLint
        run: npm run lint

  base-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Run unit tests (Jest) with coverage into coverage/unit
      - name: Run Unit Tests (with coverage)
        run: npm run test:unit -- --coverage --coverageDirectory=coverage/unit

      # Upload unit coverage as artifact for later merge
      - name: Upload Unit Coverage Artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-unit
          path: coverage/unit/

      # Upload coverage to Coveralls
      # (Coveralls upload happens in staging-deploy after merging with integration)

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # check dependcy vulnerability
      - name: Run npm audit
        run: npm audit --audit-level=high

      # Secrets leak detection
      - name: Run gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_ENABLE_COMMENTS: true
          GITLEAKS_ENABLE_SUMMARY: true
          GITLEAKS_ENABLE_UPLOAD_ARTIFACT: true
        with:
          args: --source=. --verbose --redact --report-format=sarif --report-path=results.sarif

      # SAST (Static Application Security Testing)
      # done by codeQL default

  playwright-setup:
    name: Setup Playwright
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Cache Playwright browsers
        id: playwright-cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('package-lock.json') }}-v1
          restore-keys: |
            playwright-${{ runner.os }}-

      - name: Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

  staging-db-migrate:
    name: Staging Deployment
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment: Preview
    needs: [code-quality, base-tests, security, playwright-setup]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Run database migrations
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        run: npx prisma migrate deploy

  integration-tests:
    name: Integration Tests (Shard ${{ matrix.shard }}/${{ matrix.shards }})
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment: Preview
    needs: [staging-db-migrate]
    strategy:
      matrix:
        shard: [1, 2, 3, 4]
        shards: [4]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        # Dont install husky to avoid build error
        env:
          HUSKY: 0
        run: |
          npm ci
          npm install --save-dev @types/react

      - name: Run integration tests
        env:
          NEXT_PUBLIC_API_EXTERNAL_URL: ${{ secrets.NEXT_PUBLIC_API_EXTERNAL_URL }}
          NEXT_PUBLIC_ANON_KEY: ${{ secrets.NEXT_PUBLIC_ANON_KEY }}
          SERVICE_ROLE_KEY: ${{ secrets.SERVICE_ROLE_KEY }}
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL_POOLED }}
        run: npm run test:integration -- --shard=${{ matrix.shard }}/${{ matrix.shards }} --maxWorkers=1 --coverage --coverageDirectory=coverage/integration

      - name: Upload Integration Coverage Artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-integration-shard-${{ matrix.shard }}
          path: coverage/integration

  vercel-preview:
    name: Deploy Vercel Preview
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment: Preview
    needs: [integration-tests]
    outputs:
      vercel_url: ${{ steps.vercel-deploy.outputs.VERCEL_URL }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        # Dont install husky to avoid build error
        env:
          HUSKY: 0
        run: |
          npm ci
          npm install --save-dev @types/react

      - name: Build check
        env:
          NEXT_PUBLIC_API_EXTERNAL_URL: ${{ secrets.NEXT_PUBLIC_API_EXTERNAL_URL }}
          NEXT_PUBLIC_ANON_KEY: ${{ secrets.NEXT_PUBLIC_ANON_KEY }}
          SERVICE_ROLE_KEY: ${{ secrets.SERVICE_ROLE_KEY }}
        run: npm run build

      - name: Deploy to Vercel Preview
        id: vercel-deploy
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          npx vercel pull --yes --environment=preview --token=$VERCEL_TOKEN
          npx vercel deploy --token=$VERCEL_TOKEN --yes > deployment-url.txt
          echo "VERCEL_URL=$(cat deployment-url.txt | grep -o 'https://[^[:space:]]*')" >> $GITHUB_OUTPUT

      - name: Comment PR with preview URL
        if: github.event_name == 'pull_request' && steps.vercel-deploy.outcome == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = '${{ steps.vercel-deploy.outputs.VERCEL_URL }}';
            const comment = `🚀 **Staging Preview Deployed!**

            Preview URL: ${deploymentUrl}

            ✅ Database migration completed
            ✅ Integration tests passed
            ✅ Vercel preview deployed

            The preview will be available at the URL above.`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  e2e-tests:
    name: E2E Tests on Preview (Shard ${{ matrix.shard }}/${{ matrix.shards }})
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment: Preview
    needs: [playwright-setup, vercel-preview]
    strategy:
      matrix:
        shard: [1, 2, 3, 4]
        shards: [4]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        # Dont install husky to avoid build error
        env:
          HUSKY: 0
        run: |
          npm ci
          npm install --save-dev @types/react

      - name: Restore Playwright cache
        id: restore-cache
        uses: actions/cache/restore@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('package-lock.json') }}-v1
          restore-keys: |
            playwright-${{ runner.os }}-

      - name: Run E2E Tests Against Preview (Sharded)
        env:
          # Use the deployed preview URL as Playwright baseURL
          PLAYWRIGHT_BASE_URL: ${{ needs.vercel-preview.outputs.vercel_url }}
          # Staging database for cleanup and verification (use pooled connection)
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL_POOLED }}
          # Supabase env for client auth in tests
          NEXT_PUBLIC_API_EXTERNAL_URL: ${{ secrets.NEXT_PUBLIC_API_EXTERNAL_URL }}
          NEXT_PUBLIC_ANON_KEY: ${{ secrets.NEXT_PUBLIC_ANON_KEY }}
          SERVICE_ROLE_KEY: ${{ secrets.SERVICE_ROLE_KEY }}
          CI: true
        run: npx playwright test --shard=${{ matrix.shard }}/${{ matrix.shards }}

      - name: Upload Playwright Artifacts (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-artifacts-shard-${{ matrix.shard }}
          path: |
            playwright-report
            test-results

  coverage-merge:
    name: Merge Coverage Reports
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [base-tests, integration-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Download unit coverage artifact
      - name: Download Unit Coverage Artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage-unit
          path: coverage/unit

      # Download integration coverage artifacts from all shards
      - name: Download Integration Coverage Artifacts (Shard 1)
        uses: actions/download-artifact@v4
        with:
          name: coverage-integration-shard-1
          path: coverage/integration-shard-1

      - name: Download Integration Coverage Artifacts (Shard 2)
        uses: actions/download-artifact@v4
        with:
          name: coverage-integration-shard-2
          path: coverage/integration-shard-2

      - name: Download Integration Coverage Artifacts (Shard 3)
        uses: actions/download-artifact@v4
        with:
          name: coverage-integration-shard-3
          path: coverage/integration-shard-3

      - name: Download Integration Coverage Artifacts (Shard 4)
        uses: actions/download-artifact@v4
        with:
          name: coverage-integration-shard-4
          path: coverage/integration-shard-4

      # Merge unit + integration coverage
      - name: Merge Coverage (unit + integration shards)
        run: |
          mkdir -p coverage

          # Verify unit coverage file exists
          if [ ! -f coverage/unit/lcov.info ]; then
            echo "❌ Unit coverage file missing"
            exit 1
          fi

          # Simple concatenation of all coverage files
          echo "Merging coverage files..."
          cat coverage/unit/lcov.info > coverage/lcov.info

          # Append each shard's coverage file
          for shard in 1 2 3 4; do
            if [ -f "coverage/integration-shard-$shard/lcov.info" ]; then
              echo "Adding shard $shard coverage..."
              cat coverage/integration-shard-$shard/lcov.info >> coverage/lcov.info
            fi
          done

          if [ ! -f ./coverage/lcov.info ]; then
            echo "❌ Merged coverage missing";
            exit 1;
          fi

          echo "✅ Coverage merged: $(wc -l < ./coverage/lcov.info) lines"

      # Upload merged coverage to Coveralls
      - name: Upload coverage to Coveralls
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ./coverage/lcov.info

      - name: Comment PR with Coveralls URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const branch = context.payload.pull_request?.head?.ref || context.ref.replace('refs/heads/', '');
            const coverallsUrl = `https://coveralls.io/github/${owner}/${repo}?branch=${encodeURIComponent(branch)}`;
            const comment = `🧪 **Coverage uploaded to Coveralls (merged unit + integration)**\n\nCoverage URL: ${coverallsUrl}`;
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner,
              repo,
              body: comment,
            });
