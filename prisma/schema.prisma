generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STAFF
  MANAGER
  HR_ADMIN
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum TaskStatus {
  TO_DO
  IN_PROGRESS
  COMPLETED
  BLOCKED
}

// DEPARTMENT
model Department {
  id        String   @id @default(uuid())
  name      String
  parentId  String?
  managerId String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parent   Department?   @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children Department[]  @relation("DepartmentHierarchy")
  manager  UserProfile?  @relation("DepartmentManager", fields: [managerId], references: [id])
  members  UserProfile[]
  projects Project[]
  tasks    Task[]
  teams    Team[]
}

// USER PROFILE
model UserProfile {
  id           String   @id @default(uuid())
  email        String   @unique
  name         String?
  role         UserRole @default(STAFF)
  departmentId String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  department         Department?      @relation(fields: [departmentId], references: [id])
  managedDepartments Department[]     @relation("DepartmentManager")
  teamMembers        TeamMember[]
  createdProjects    Project[]        @relation("CreatedProjects")
  ownedTasks         Task[]           @relation("TaskOwner")
  assignedTasks      TaskAssignment[] @relation("AssignedUser")
  assignedByTasks    TaskAssignment[] @relation("AssignmentAssigner")
  comments           Comment[]
  taskLogs           TaskLog[]
  uploadedFiles      TaskFile[]
  notifications      Notification[]
}

// TEAM
model Team {
  id           String   @id @default(uuid())
  name         String
  description  String?
  departmentId String
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  department Department   @relation(fields: [departmentId], references: [id])
  members    TeamMember[]
}

// TEAM MEMBER (bridge)
model TeamMember {
  id       String   @id @default(uuid())
  teamId   String
  userId   String
  joinedAt DateTime @default(now())

  team Team        @relation(fields: [teamId], references: [id])
  user UserProfile @relation(fields: [userId], references: [id])
}

// PROJECT
model Project {
  id           String       @id @default(uuid())
  name         String
  description  String?
  priority     TaskPriority @default(MEDIUM)
  dueDate      DateTime?
  status       TaskStatus   @default(TO_DO)
  departmentId String
  createdById  String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  isArchived   Boolean      @default(false)

  department Department  @relation(fields: [departmentId], references: [id])
  createdBy  UserProfile @relation("CreatedProjects", fields: [createdById], references: [id])
  tasks      Task[]
}

// TASK
model Task {
  id           String       @id @default(uuid())
  title        String
  description  String       @db.Text
  priority     TaskPriority @default(MEDIUM)
  dueDate      DateTime
  status       TaskStatus   @default(TO_DO)
  ownerId      String
  projectId    String?
  departmentId String
  parentTaskId String?
  isArchived   Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  owner          UserProfile      @relation("TaskOwner", fields: [ownerId], references: [id])
  project        Project?         @relation(fields: [projectId], references: [id])
  department     Department       @relation(fields: [departmentId], references: [id])
  parentTask     Task?            @relation("TaskSubtasks", fields: [parentTaskId], references: [id])
  subtasks       Task[]           @relation("TaskSubtasks")
  assignments    TaskAssignment[]
  tags           TaskTag[]
  comments       Comment[]
  files          TaskFile[]
  logs           TaskLog[]
  notifications  Notification[]
  calendarEvents CalendarEvent[]

  @@index([ownerId])
  @@index([projectId])
  @@index([departmentId])
  @@index([parentTaskId])
  @@index([status])
  @@index([dueDate])
  @@index([isArchived])
}

// TASK ASSIGNMENT
model TaskAssignment {
  id           String @id @default(uuid())
  taskId       String
  userId       String
  assignedById String

  task       Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user       UserProfile @relation("AssignedUser", fields: [userId], references: [id], onDelete: Cascade)
  assignedBy UserProfile @relation("AssignmentAssigner", fields: [assignedById], references: [id])

  createdAt DateTime @default(now())
}

// COMMENT
model Comment {
  id        String   @id @default(uuid())
  content   String   @db.Text
  taskId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user UserProfile @relation(fields: [userId], references: [id])
}

// TASK FILE
model TaskFile {
  id          String   @id @default(uuid())
  taskId      String
  userId      String
  fileName    String
  fileSize    Int
  fileType    String
  storagePath String
  uploadedAt  DateTime @default(now())

  task Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user UserProfile @relation(fields: [userId], references: [id])
}

// TAG
model Tag {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())

  tasks TaskTag[]
}

// TASK TAG (bridge)
model TaskTag {
  id     String @id @default(uuid())
  taskId String
  tagId  String

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([taskId, tagId])
}

// TASK LOG
model TaskLog {
  id        String   @id @default(uuid())
  taskId    String
  userId    String
  action    String // e.g. "created", "updated", etc.
  changes   Json?
  timestamp DateTime @default(now())

  task Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user UserProfile @relation(fields: [userId], references: [id])
}

// NOTIFICATION
model Notification {
  id        String   @id @default(uuid())
  taskId    String
  userId    String
  type      String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  task Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user UserProfile @relation(fields: [userId], references: [id])
}

// CALENDAR EVENT
model CalendarEvent {
  id          String   @id @default(uuid())
  taskId      String
  eventDate   DateTime
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
}
