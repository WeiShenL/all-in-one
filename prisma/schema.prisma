generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STAFF
  MANAGER
  HR_ADMIN
}

enum TaskStatus {
  TO_DO
  IN_PROGRESS
  COMPLETED
  BLOCKED
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_UPDATED
  COMMENT_ADDED
  DEADLINE_REMINDER
  TASK_OVERDUE
  TASK_DELETED
  TASK_REASSIGNED
  PROJECT_COLLABORATION_ADDED
}

enum LogAction {
  CREATED
  UPDATED
  ARCHIVED
  UNARCHIVED
  DELETED
  RECURRING_TASK_GENERATED
}

// DEPARTMENT
model Department {
  id        String   @id @default(uuid())
  name      String
  parentId  String?
  managerId String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parent   Department?   @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children Department[]  @relation("DepartmentHierarchy")
  manager  UserProfile?  @relation("DepartmentManager", fields: [managerId], references: [id])
  members  UserProfile[]
  projects Project[]
  tasks    Task[]
  teams    Team[]
  projectCollaborators ProjectCollaborator[]

  @@index([parentId])
  @@index([managerId])
  @@index([isActive])
  @@map("department")
}

// USER PROFILE
model UserProfile {
  id           String   @id @default(uuid())
  email        String   @unique
  name         String
  role         UserRole @default(STAFF)
  departmentId String
  isHrAdmin    Boolean  @default(false)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("user_profile")

  department         Department?           @relation(fields: [departmentId], references: [id])
  managedDepartments Department[]          @relation("DepartmentManager")
  ledTeams           Team[]                @relation("TeamLeader")
  teamMembers        TeamMember[]
  createdProjects    Project[]             @relation("CreatedProjects")
  ownedTasks         Task[]                @relation("TaskOwner")
  assignedTasks      TaskAssignment[]      @relation("AssignedUser")
  assignedByTasks    TaskAssignment[]      @relation("AssignmentAssigner")
  comments           Comment[]
  taskLogs           TaskLog[]
  uploadedFiles      TaskFile[]            @relation("FileUploader")
  notifications      Notification[]
  calendarEvents     CalendarEvent[]
  projectCollaborations ProjectCollaborator[]

  @@index([email])
  @@index([role])
  @@index([departmentId])
  @@index([isActive])
}

// TEAM
model Team {
  id           String   @id @default(uuid())
  name         String
  description  String?
  departmentId String
  leaderId     String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  department Department   @relation(fields: [departmentId], references: [id])
  leader     UserProfile? @relation("TeamLeader", fields: [leaderId], references: [id])
  members    TeamMember[]

  @@index([departmentId])
  @@index([leaderId])
  @@index([isActive])
  @@map("team")
}

// TEAM MEMBER (bridge)
model TeamMember {
  teamId   String
  userId   String
  joinedAt DateTime @default(now())

  team Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([teamId, userId])
  @@map("team_member")
}

// PROJECT
model Project {
  id           String        @id @default(uuid())
  name         String        @unique
  description  String?       @db.Text
  priority     Int           @default(5) // Priority scale 1-10
  status       ProjectStatus @default(ACTIVE)
  departmentId String
  creatorId    String
  isArchived   Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  department Department  @relation(fields: [departmentId], references: [id])
  creator    UserProfile @relation("CreatedProjects", fields: [creatorId], references: [id])
  tasks      Task[]
  collaborators ProjectCollaborator[]

  @@index([departmentId])
  @@index([creatorId])
  @@index([status])
  @@index([isArchived])
  @@map("project")
}

// TASK
model Task {
  id           String       @id @default(uuid())
  title        String
  description  String       @db.Text
  priority     Int          @default(5) // Priority scale 1-10
  dueDate      DateTime
  status       TaskStatus   @default(TO_DO)
  ownerId      String
  projectId    String?
  departmentId String
  parentTaskId String?
  recurringInterval Int? // Interval in days for recurring tasks, optional
  isArchived   Boolean      @default(false)
  createdAt    DateTime     @default(now())
  startDate    DateTime?    // When work first began (set when status changes to IN_PROGRESS first time)
  updatedAt    DateTime     @updatedAt

  owner          UserProfile      @relation("TaskOwner", fields: [ownerId], references: [id])
  project        Project?         @relation(fields: [projectId], references: [id])
  department     Department       @relation(fields: [departmentId], references: [id])
  parentTask     Task?            @relation("TaskSubtasks", fields: [parentTaskId], references: [id])
  subtasks       Task[]           @relation("TaskSubtasks")
  assignments    TaskAssignment[]
  tags           TaskTag[]
  comments       Comment[]
  files          TaskFile[]
  logs           TaskLog[]
  notifications  Notification[]
  calendarEvents CalendarEvent[]

  @@index([ownerId])
  @@index([projectId])
  @@index([departmentId])
  @@index([parentTaskId])
  @@index([status])
  @@index([dueDate])
  @@index([isArchived])
  @@index([createdAt])
  @@index([startDate])
  @@map("task")
}

// TASK ASSIGNMENT
model TaskAssignment {
  taskId       String
  userId       String
  assignedById String
  assignedAt   DateTime @default(now())

  task       Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user       UserProfile @relation("AssignedUser", fields: [userId], references: [id], onDelete: Cascade)
  assignedBy UserProfile @relation("AssignmentAssigner", fields: [assignedById], references: [id])

  @@id([taskId, userId])
  @@index([assignedById])
  @@map("task_assignment")
}

// PROJECT COLLABORATOR (bridge)
// User-level project access control - implements "Invite Collaborators" user story
// A user becomes a collaborator when assigned to any task within a project
model ProjectCollaborator {
  projectId    String
  userId       String
  departmentId String
  addedAt      DateTime @default(now())

  project    Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user       UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)
  department Department  @relation(fields: [departmentId], references: [id], onDelete: Cascade)

  @@id([projectId, userId])
  @@index([userId])
  @@index([departmentId])
  @@index([projectId, departmentId])
  @@map("project_collaborator")
}

// COMMENT
model Comment {
  id        String   @id @default(uuid())
  content   String   @db.Text
  taskId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user UserProfile @relation(fields: [userId], references: [id])

  @@index([taskId])
  @@index([userId])
  @@index([createdAt])
  @@map("comment")
}

// TASK FILE
model TaskFile {
  id           String   @id @default(uuid())
  taskId       String
  fileName     String
  fileSize     Int
  fileType     String
  storagePath  String   @unique
  uploadedById String
  uploadedAt   DateTime @default(now())

  task       Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  uploadedBy UserProfile @relation("FileUploader", fields: [uploadedById], references: [id])

  @@index([taskId])
  @@index([uploadedById])
  @@index([uploadedAt])
  @@map("task_file")
}

// TAG
model Tag {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())

  tasks TaskTag[]

  @@map("tag")
}

// TASK TAG (bridge)
model TaskTag {
  taskId String
  tagId  String

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([taskId, tagId])
  @@map("task_tag")
}

// TASK LOG
model TaskLog {
  id        String    @id @default(uuid())
  taskId    String
  userId    String
  action    LogAction
  field     String
  changes   Json?
  metadata  Json?
  timestamp DateTime  @default(now())

  task Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user UserProfile @relation(fields: [userId], references: [id])

  @@index([taskId])
  @@index([userId])
  @@index([timestamp])
  @@index([action])
  @@map("task_log")
}

// NOTIFICATION
model Notification {
  id        String           @id @default(uuid())
  userId    String
  type      NotificationType
  title     String
  message   String           @db.Text
  taskId    String?
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  user UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)
  task Task?       @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@index([type])
  @@index([taskId])
  @@index([userId, isRead, createdAt])
  @@map("notification")
}

// CALENDAR EVENT
model CalendarEvent {
  id          String   @id @default(uuid())
  taskId      String
  userId      String
  title       String
  eventDate   DateTime
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())

  task Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([eventDate])
  @@index([taskId])
  @@index([isCompleted])
  @@map("calendar_event")
}
